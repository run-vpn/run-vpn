[versions]
accompanistDrawablepainter = "0.32.0"
agp = "8.2.2"
cryptacular = "1.2.6"
desugar_jdk_libs = "2.0.4"
detektFormatting = "1.23.3"
flagkitAndroid = "1.0.2"
kotlin = "1.9.22"
compose = "1.5.8"
composeUI = "1.6.1"
compose-compiler = "1.5.8"
compose-material3 = "1.2.0"
compose-material = "1.6.1"
androidx-activityCompose = "1.8.2"
composeReorderable = "0.9.6"

glance = "1.0.0"
glanceViewer = "0.2.2"

decompose = "2.2.1"
essenty = "1.3.0"
coroutines = "1.7.3"
ktor = "2.3.7"
ktorfit = "1.11.1"
koin = "3.5.0"
kermit = "1.2.2"
proxy-sdk-android = "1.0.24"
proxy-sdk-wrapper-android = "1.0.3"
quickieBundled = "1.6.0"
relinker = "1.4.5"
sqldelight = "2.0.0"
logbackClassic = "1.4.0"
slf4j = "1.6.1"
logback = "1.4.0"
okio = "3.4.0"
ksp = "1.9.22-1.0.17"
kotlinSerialization = "1.6.1"
coil = "2.5.0"
flagkit = "1.0.2"
multiplatformSettings = "1.1.1"
kotlinDateTime = "0.5.0"
androidxCore = "1.12.0"
sentry = "0.5.0"
detekt = "1.23.5"
qrcode = "0.0.1"
tunnel = "1.0.20230706"
zxing = "3.5.1"
leakCanary = "2.12"
sentryPlugin = "4.3.1"

[libraries]
accompanist-drawablepainter = { module = "com.google.accompanist:accompanist-drawablepainter", version.ref = "accompanistDrawablepainter" }
cryptacular = { module = "org.cryptacular:cryptacular", version.ref = "cryptacular" }
desugar_jdk_libs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar_jdk_libs" }
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
flagkit-android = { module = "com.github.murgupluoglu:flagkit-android", version.ref = "flagkitAndroid" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
androidx-core = { module = "androidx.core:core", version.ref = "androidxCore" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
# Compose
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "composeUI" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "composeUI" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "composeUI" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "composeUI" }
compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "compose-material3" }
compose-material = { module = "androidx.compose.material:material", version.ref = "compose-material" }
glance-appwidgets = { module = "androidx.glance:glance-appwidget", version.ref = "glance" }
glance-material2 = { module = "androidx.glance:glance-material", version.ref = "glance" }
glance-material3 = { module = "androidx.glance:glance-material3", version.ref = "glance" }
glance-viewer = { module = "com.google.android.glance.tools:appwidget-viewer", version.ref = "glanceViewer" }
glance-hostpreview = { module = "com.google.android.glance.tools:appwidget-host", version.ref = "glanceViewer" }

compose-reorderable = { module = "org.burnoutcrew.composereorderable:reorderable", version.ref = "composeReorderable"}

coil = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
flagkit = { module = "com.github.murgupluoglu:flagkit-android", version.ref = "flagkit" }
proxy-sdk = { module = "com.android.asdk.release:sdk-android", version.ref = "proxy-sdk-android" }
proxy-sdk-wrapper-db = { module = "com.android.asdk.wrapper.app.release:db", version.ref = "proxy-sdk-wrapper-android" }
proxy-sdk-wrapper-api = { module = "com.android.asdk.wrapper.app.release:api", version.ref = "proxy-sdk-wrapper-android" }
proxy-sdk-wrapper = { module = "com.android.asdk.wrapper.app.release:sdk-wrapper", version.ref = "proxy-sdk-wrapper-android" }
proxy-sdk-wrapper-stub = { module = "com.android.asdk.wrapper.app.release:stub-wrapper", version.ref = "proxy-sdk-wrapper-android" }

logback-classic-v140 = { module = "ch.qos.logback:logback-classic", version.ref = "logbackClassic" }
quickie-bundled = { module = "io.github.g00fy2.quickie:quickie-bundled", version.ref = "quickieBundled" }
relinker = { module = "com.getkeepsafe.relinker:relinker", version.ref = "relinker" }
tunnel = { module = "com.wireguard.android:tunnel", version.ref = "tunnel" }
zxing = { module = "com.google.zxing:core", version.ref = "zxing" }

# Tools
tools-leakcanary = { module = "com.squareup.leakcanary:leakcanary-android", version.ref = "leakCanary" }

# KMP libraries
kotlin-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinDateTime" }

# Architecture
decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-ext-android = { module = "com.arkivanov.decompose:extensions-android", version.ref = "decompose" }
decompose-ext-compose = { module = "com.arkivanov.decompose:extensions-compose-jetpack", version.ref = "decompose" }
essenty = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essenty" }

# Multithreading
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }

# Network
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }
ktor-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-ios = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktorfit = { module = "de.jensklingenberg.ktorfit:ktorfit-lib", version.ref = "ktorfit" }
ktorfit-ksp = { module = "de.jensklingenberg.ktorfit:ktorfit-ksp", version.ref = "ktorfit" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinSerialization" }

# DI
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android" }

# Logger
logs-kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
logs-slf4j = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
logs-logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# Storage
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }
sqldelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-extensions = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }
settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatformSettings" }
settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatformSettings" }

# Sentry
sentry = { module = "io.sentry:sentry-kotlin-multiplatform", version.ref = "sentry" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
devtools-ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
ktorfit = { id = "de.jensklingenberg.ktorfit", version.ref = "ktorfit" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }
kotlin-parcelize = { id = "kotlin-parcelize"}
sentry = { id = "io.sentry.android.gradle", version.ref = "sentryPlugin" }
